version: '3.8'

services:
  # Main IRST API service
  irst-api:
    build:
      context: .
      target: production
    ports:
      - "8080:8080"
    volumes:
      - ./models:/app/models:ro
      - ./data:/app/data:ro
      - ./outputs:/app/outputs
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONPATH=/app
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Training service
  irst-trainer:
    build:
      context: .
      target: training
    volumes:
      - ./data:/data
      - ./outputs:/outputs
      - ./checkpoints:/checkpoints
      - ./configs:/app/configs
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - WANDB_PROJECT=irst-detection
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    profiles:
      - training

  # Development environment
  irst-dev:
    build:
      context: .
      target: development
    ports:
      - "8888:8888"
    volumes:
      - .:/app
      - ./data:/data
      - ./outputs:/outputs
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - JUPYTER_ENABLE_LAB=yes
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    profiles:
      - development

  # TensorBoard service
  tensorboard:
    image: tensorflow/tensorflow:latest
    command: tensorboard --logdir=/logs --host=0.0.0.0 --port=6006
    ports:
      - "6006:6006"
    volumes:
      - ./outputs/logs:/logs:ro
    profiles:
      - monitoring

  # Model serving with ONNX Runtime
  onnx-server:
    image: mcr.microsoft.com/onnxruntime/server:latest
    ports:
      - "8001:8001"
    volumes:
      - ./models/onnx:/models:ro
    environment:
      - BACKEND=onnxruntime
    profiles:
      - serving

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    profiles:
      - caching

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    profiles:
      - monitoring

  # Visualization dashboard with Grafana (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    profiles:
      - monitoring

volumes:
  redis_data:
  grafana_data:

networks:
  default:
    driver: bridge
